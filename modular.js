#include "crop.js"#target photoshop/* @@@BUILDINFO@@@ Modular.jsx 0.0.1 *//* global activeDocument, ElementPlacement, app *//** Требования: слои для обработки должны называться десятичной цифрой без букв */// разница между `y` нижней границы модуля и `y` верхней границы черного прямоугольникаvar BOTTOM_RECT_UP = 20;// разница между `y` нижней границы модуля и `y` нижней границы черного прямоугольникаvar BOTTOM_RECT_BOTTOM = 40;// разница между `x` правой границы модуля и `x` правой границы черного прямоугольникаvar BOTTOM_RECT_RIGHT = 20;// разница между `x` правой границы модуля и `x` левой границы черного прямоугольникаvar RIGHT_RECT_LEFT = 20;// разница между `x` правой границы модуля и `x` правой границы черного прямоугольникаvar RIGHT_RECT_RIGHT = 40;// разница между `y` нижней границы модуля и `y` нижней границы черного прямоугольникаvar RIGHT_RECT_BOTTOM = 40;// разница между `y` верхней границы модуля и `y` верхней границы черного прямоугольникаvar RIGHT_RECT_UP = 20;processAllDocuments();function processModularLayer(layer) {  /*   (x, y) верхнего левого угла   (x, y) нижнего правого угла   */  var bounds = layer.boundsNoEffects;  /*   Создаем новый слой и помещаем его под слой, который обрабатываем   */  var rectLayer = activeDocument.artLayers.add();  rectLayer.name = layer.name + '_' + 'bottom';  rectLayer.move(layer, ElementPlacement.PLACEAFTER);  activeDocument.activeLayer = rectLayer;  /*   Выделяем область для нижнего черного прямоугольника   */  var left = bounds[0].value;  var top = bounds[1].value;  var right = bounds[2].value;  var bottom = bounds[3].value;  var coords = [    [left, bottom - BOTTOM_RECT_UP],    [right + BOTTOM_RECT_RIGHT, bottom - BOTTOM_RECT_UP],    [right + BOTTOM_RECT_RIGHT, bottom + BOTTOM_RECT_BOTTOM],    [left, bottom + BOTTOM_RECT_BOTTOM]  ];  activeDocument.selection.select(coords);  fillSelectionWithBlack();  /*   Вырезаем углы у нижнего прямоугольника   */  cropBottomRect(coords);  activeDocument.selection.selectAll();  /*   Гауссово размытие   */  activeDocument.activeLayer.applyGaussianBlur(9);  /*   Создаем новый слой и помещаем его под слой, который обрабатываем   */  rectLayer = activeDocument.artLayers.add();  rectLayer.name = layer.name + '_' + 'left';  rectLayer.move(layer, ElementPlacement.PLACEAFTER);  activeDocument.activeLayer = rectLayer;  coords = [    [right - RIGHT_RECT_LEFT, top - RIGHT_RECT_UP],    [right + RIGHT_RECT_RIGHT, top - RIGHT_RECT_UP],    [right + RIGHT_RECT_RIGHT, bottom + RIGHT_RECT_BOTTOM],    [right - RIGHT_RECT_LEFT, bottom + RIGHT_RECT_BOTTOM]  ];  activeDocument.selection.select(coords);  fillSelectionWithBlack();  cropRightRect(coords);  activeDocument.selection.selectAll();  /*   Гауссово размытие   */  activeDocument.activeLayer.applyGaussianBlur(9);  activeDocument.activeLayer = layer;  activeDocument.selection.select(coords);  // Сделать из него копию// =======================================================  var idCpTL = charIDToTypeID("CpTL");  executeAction(idCpTL, undefined, DialogModes.NO);  exposureSelection();}function exposureSelection() {  var desc4 = new ActionDescriptor();  desc4.putEnumerated(    stringIDToTypeID("presetKind"),    stringIDToTypeID("presetKindType"),    stringIDToTypeID("presetKindCustom")  );  desc4.putDouble(charIDToTypeID("Exps"), -3.000000);  desc4.putDouble(charIDToTypeID("Ofst"), 0.000000);  desc4.putDouble(stringIDToTypeID("gammaCorrection"), 1.000000);  executeAction(charIDToTypeID("Exps"), desc4, DialogModes.NO);}/** Заливает область выделения черным. */function fillSelectionWithBlack() {  app.foregroundColor.rgb.hexColor = 'ff0000';  app.foregroundColor.model = ColorModel.RGB;  activeDocument.selection.fill(app.foregroundColor, ColorBlendMode.COLOR, '50');}function cropRightRect(coords) {  var left = coords[0][0];  var up = coords[0][1];  var right = coords[2][0];  var bottom = coords[2][1];  var cropPoints = [    [left, up],    [right, up],    [right, up + (right - left)]  ];  // обрезаем верхний треугольник у прямоугольника  cropArea(cropPoints);  cropPoints = [    [right, bottom],    [right - (right - left), bottom],    [right - (right - left), bottom - (right - left)]  ];  // обрезаем нижний треугольник у прямоугольника  cropArea(cropPoints);}function cropBottomRect(coords) {  var left = coords[0][0];  var up = coords[0][1];  var right = coords[2][0];  var bottom = coords[2][1];  // треть высоты прямоугольника  var third = Math.abs(bottom - up) / 3;  var cropPoints = [    [left - third, up],    [left + (2 * third), bottom],    [left - third, bottom]  ];  // обрезаем левый треугольник у прямоугольника  cropArea(cropPoints);  cropPoints = [    [right + third, bottom],    [right + third, up],    [right - 3 * third, up]  ];  cropArea(cropPoints);}function processDocument(document) {  var layer;  var LAYER_NAME_RE = new RegExp('^\\d+$', 'ig');  var layersToProcess = [];  for (var j = 0; j < document.artLayers.length; j++) {    layer = document.artLayers[j];    if (LAYER_NAME_RE.test(layer.name)) {      // обрабатываем слой с картинкой      layersToProcess.push(layer);    }  }  for (var j = 0; j < layersToProcess.length; j++) {    layer = layersToProcess[j];    if (LAYER_NAME_RE.test(layer.name)) {      // обрабатываем слой с картинкой      processModularLayer(layer);      //return;    }  }}function processAllDocuments() {  var doc;  for (var i = 0; i < app.documents.length; i++) {    doc = app.documents[i];    app.activeDocument = doc;    processDocument(doc);  }}