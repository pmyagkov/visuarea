#include "crop.js"#target photoshop/* @@@BUILDINFO@@@ Modular.jsx 0.0.1 *//* global activeDocument, ElementPlacement, app *//** Требования: слои для обработки должны называться десятичной цифрой без букв */// разница между `y` нижней границы модуля и `y` верхней границы черного прямоугольникаvar BOTTOM_RECT_UP = 20;// разница между `y` нижней границы модуля и `y` нижней границы черного прямоугольникаvar BOTTOM_RECT_BOTTOM = 30;// разница между `x` правой границы модуля и `x` правой границы черного прямоугольникаvar BOTTOM_RECT_RIGHT = 20;// разница между `x` правой границы модуля и `x` левой границы черного прямоугольникаvar RIGHT_RECT_LEFT = 20;// разница между `x` правой границы модуля и `x` правой границы черного прямоугольникаvar RIGHT_RECT_RIGHT = 20;// разница между `y` нижней границы модуля и `y` нижней границы черного прямоугольникаvar RIGHT_RECT_BOTTOM = 40;// разница между `y` верхней границы модуля и `y` верхней границы черного прямоугольникаvar RIGHT_RECT_UP = 20;// величина обрезки угла слояvar LAYER_CORNER_CROP = 10;var ORIENTATION = {  UP: 0,  DOWN: 1,  LEFT: 2,  RIGHT: 3};processAllDocuments();/** * Обрабатывает целевой слой: добавляет тень, обрезает углы. * @param {ArtLayer} layer * @returns {ArtLayers[]} созданные в процессе слои */function processModularLayer(layer) {  /*   (x, y) верхнего левого угла   (x, y) нижнего правого угла   */  var bounds = layer.boundsNoEffects;  /*   Создаем новый слой и помещаем его под слой, который обрабатываем   */  var rectLayer = activeDocument.artLayers.add();  rectLayer.name = layer.name + '_' + 'shadow';  rectLayer.move(layer, ElementPlacement.PLACEAFTER);  activeDocument.activeLayer = rectLayer;  /*   Выделяем область для нижнего черного прямоугольника   */  var left = bounds[0].value;  var top = bounds[1].value;  var right = bounds[2].value;  var bottom = bounds[3].value;  var bottomRectCoords = [    [left, bottom - BOTTOM_RECT_UP],    [right - RIGHT_RECT_LEFT, bottom - BOTTOM_RECT_UP],    [right - RIGHT_RECT_LEFT, bottom + BOTTOM_RECT_BOTTOM],    [left, bottom + BOTTOM_RECT_BOTTOM]  ];  createRectAndFillWithBlack(rectLayer, bottomRectCoords);  var rightRectCoords = [    [right - RIGHT_RECT_LEFT, top - RIGHT_RECT_UP],    [right + RIGHT_RECT_RIGHT, top - RIGHT_RECT_UP],    [right + RIGHT_RECT_RIGHT, bottom + BOTTOM_RECT_BOTTOM],    [right - RIGHT_RECT_LEFT, bottom + BOTTOM_RECT_BOTTOM]  ];  createRectAndFillWithBlack(rectLayer, rightRectCoords);    cropShadowCorners(rectLayer, bottomRectCoords, rightRectCoords);  applyGaussianBlur(rectLayer);  cropLayerCorners(layer);  exposureLayerRect(layer, rightRectCoords);    return [rectLayer];}function exposureLayerRect(layer, coords) {  activeDocument.activeLayer = layer;  activeDocument.selection.select(coords);  // копия слоя с выделением  var idCpTL = charIDToTypeID("CpTL");  executeAction(idCpTL, undefined, DialogModes.NO);  exposureSelection();}function applyGaussianBlur(layer) {  activeDocument.activeLayer = layer;  activeDocument.selection.selectAll();  activeDocument.activeLayer.applyGaussianBlur(9);}function cropLayerCorners(layer) {  /*   (x, y) верхнего левого угла   (x, y) нижнего правого угла   */  var bounds = layer.boundsNoEffects;  var left = bounds[0].value;  var top = bounds[1].value;  var right = bounds[2].value;  var bottom = bounds[3].value;  activeDocument.activeLayer = layer;  cropCorner([right, top], [right - LAYER_CORNER_CROP, top], ORIENTATION.DOWN);  cropCorner([right, bottom], [right - LAYER_CORNER_CROP, bottom], ORIENTATION.UP);}/** Обрезает углы у тени. */function cropShadowCorners(layer, bottomRectCoords, rightRectCoords) {  activeDocument.activeLayer = layer;  var left = bottomRectCoords[0][0];  var up = bottomRectCoords[0][1];  var right = bottomRectCoords[2][0];  var bottom = bottomRectCoords[2][1];  // нижний левый угол  cropCorner([left, bottom], [left + (bottom - up) * 2 / 3, bottom], ORIENTATION.UP);  left = rightRectCoords[0][0];  up = rightRectCoords[0][1];  right = rightRectCoords[2][0];  bottom = rightRectCoords[2][1];  // нижний левый угол  cropCorner([right, up], [right, up + (right - left)], ORIENTATION.LEFT);}/** Выдержка для выделения. */function exposureSelection() {  var desc4 = new ActionDescriptor();  desc4.putEnumerated(    stringIDToTypeID("presetKind"),    stringIDToTypeID("presetKindType"),    stringIDToTypeID("presetKindCustom")  );  desc4.putDouble(charIDToTypeID("Exps"), -3.000000);  desc4.putDouble(charIDToTypeID("Ofst"), 0.000000);  desc4.putDouble(stringIDToTypeID("gammaCorrection"), 1.000000);  executeAction(charIDToTypeID("Exps"), desc4, DialogModes.NO);}/** Заливает область выделения черным. */function createRectAndFillWithBlack(layer, coords) {  activeDocument.activeLayer = layer;  activeDocument.selection.select(coords);  app.foregroundColor.rgb.hexColor = 'ff0000';  app.foregroundColor.model = ColorModel.RGB;  activeDocument.selection.fill(app.foregroundColor, ColorBlendMode.COLOR, '50');}/**  Обрабатывает документ. */function processDocument(document) {  var layer;  var LAYER_NAME_RE = new RegExp('^\\d+$', 'ig');  var layersToProcess = [];  for (var j = 0; j < document.artLayers.length; j++) {    layer = document.artLayers[j];    if (LAYER_NAME_RE.test(layer.name)) {      // обрабатываем слой с картинкой      layersToProcess.push(layer);    }  }  for (var j = 0; j < layersToProcess.length; j++) {    layer = layersToProcess[j];    if (LAYER_NAME_RE.test(layer.name)) {      // обрабатываем слой с картинкой      processModularLayer(layer);      return;    }  }}/** Обрабатывает все открытые документы. */function processAllDocuments() {  var doc;  for (var i = 0; i < app.documents.length; i++) {    doc = app.documents[i];    app.activeDocument = doc;    processDocument(doc);  }}